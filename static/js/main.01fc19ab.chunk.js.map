{"version":3,"sources":["components/Header.js","components/Noticia.js","components/ListaNoticias.js","components/Formulario.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Noticia","noticia","urlToImage","url","title","description","source","imagen","src","alt","name","target","rel","ListaNoticias","noticias","map","key","Formulario","state","categoria","cambiarCategoria","e","setState","value","props","consultarNoticias","onChange","this","Component","App","a","fetch","respuesta","json","articles","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAuBeA,EAnBA,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAF,OACX,yBAAKC,UAAU,mCACX,uBAAGC,KAAK,KAAKD,UAAU,qBAAvB,IAA6CD,KCkCtCG,EArCC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAGPC,EAA+CD,EAA/CC,WAAYC,EAAmCF,EAAnCE,IAAKC,EAA8BH,EAA9BG,MAAOC,EAAuBJ,EAAvBI,YAAaC,EAAUL,EAAVK,OAItCC,EAAUL,EACZ,yBAAKJ,UAAU,cACX,yBAAKU,IAAKN,EAAYO,IAAKL,IAC3B,0BAAMN,UAAU,cAAcQ,EAAOI,OAE3C,KAEF,OACI,yBAAKZ,UAAU,mBACX,yBAAKA,UAAU,QACPS,EACA,yBAAKT,UAAU,gBACX,4BAAKM,EAAL,KACA,2BAAIC,IAER,yBAAKP,UAAU,eACX,uBAAGC,KAAMI,EAAKQ,OAAO,SAASC,IAAI,sBAAsBd,UAAU,iCAAlE,4BCNTe,EAhBO,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACd,yBAAKhB,UAAU,OACVgB,EAASC,KAAI,SAAAd,GAAO,OACjB,kBAAC,EAAD,CACAe,IAAOf,EAAQE,IACfF,QAAWA,SCkDZgB,E,4MAxDXC,MAAQ,CACJC,UAAW,W,EAKdC,iBAAmB,SAAAC,GAEhB,EAAKC,SAAS,CACVH,UAAWE,EAAEV,OAAOY,QACrB,WACC,EAAKC,MAAMC,kBAAkB,EAAKP,MAAMC,e,uDAQ5C,OAEI,yBAAKrB,UAAW,gBACZ,yBAAKA,UAAU,yBACX,8BACI,mEAEA,yBAAKA,UAAU,2BACX,4BACA4B,SAAUC,KAAKP,kBAEX,4BAAQG,MAAM,WAAd,WACA,4BAAQA,MAAM,YAAd,aACA,4BAAQA,MAAM,iBAAd,mBACA,4BAAQA,MAAM,UAAd,SACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,aACA,4BAAQA,MAAM,cAAd,yB,GArCPK,aCsDVC,E,4MAlDbX,MAAQ,CACNJ,SAAU,I,EAOZW,kB,sBAAoB,8CAAAK,EAAA,6DAAOX,EAAP,+BAAmB,UAC/BhB,EADY,kEACoDgB,EADpD,qDAGMY,MAAM5B,GAHZ,cAGZ6B,EAHY,gBAIIA,EAAUC,OAJd,OAIZnB,EAJY,OAMlB,EAAKQ,SAAS,CACZR,SAAUA,EAASoB,WAPH,2C,kEAHnBP,KAAKF,sB,+BAmBJ,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CACA5B,OAAS,yBAET,yBAAKC,UAAU,uCACb,kBAAC,EAAD,CACE2B,kBAAmBE,KAAKF,oBAG1B,kBAAC,EAAD,CACEX,SAAYa,KAAKT,MAAMJ,iB,GApCjBc,aCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.01fc19ab.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Header = ({titulo}) => (\r\n    <nav className=\"nav-wrapper light-blue darken-3\">\r\n        <a href=\"#!\" className=\"brand-logo center\"> {titulo}\r\n        </a>\r\n\r\n\r\n\r\n    </nav>\r\n\r\n\r\n );\r\n\r\n \r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired\r\n\r\n}\r\n\r\n\r\nexport default Header ;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Noticia = ({noticia}) => {\r\n\r\n    //extraer los datos \r\n    const {urlToImage, url, title, description, source} = noticia;\r\n\r\n\r\n    //condicionalmente cargar imagen si esta disponible \r\n    const imagen = (urlToImage) ? \r\n        <div className=\"card-image\">\r\n            <img src={urlToImage} alt={title}/>\r\n            <span className=\"card-title\">{source.name}</span>\r\n        </div>\r\n    : null;\r\n    \r\n    return ( \r\n        <div className=\" col s12 m6  l4\">\r\n            <div className=\"card\">\r\n                   {imagen}\r\n                    <div className=\"card-content\">\r\n                        <h3>{title} </h3>  \r\n                        <p>{description}</p>\r\n                    </div>\r\n                    <div className=\"card-action\">\r\n                        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"waves-effect waves-light  btn\">\r\n                        Ver Noticia Completa\r\n                        </a>\r\n                    </div>\r\n             </div>   \r\n        </div>\r\n\r\n     );\r\n}\r\n\r\nNoticia.propTypes={\r\n    noticia: PropTypes.object.isRequired\r\n}\r\n \r\nexport default Noticia;","import React from 'react';\r\nimport Noticia from './Noticia';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ListaNoticias = ({noticias}) =>  ( \r\n        <div className=\"row\">\r\n            {noticias.map(noticia => (\r\n                <Noticia\r\n                key = {noticia.url}\r\n                noticia = {noticia}\r\n                />\r\n            ))}\r\n         </div>   \r\n);\r\n \r\nListaNoticias.propTypes = {\r\n    noticias : PropTypes.array.isRequired\r\n    \r\n}\r\n\r\nexport default ListaNoticias;","import React,{Component} from 'react';\r\nimport propTypes from 'prop-types';\r\nclass Formulario extends Component {\r\n    state = { \r\n        categoria: 'general'\r\n     }\r\n\r\n\r\n\r\n     cambiarCategoria = e => {\r\n\r\n        this.setState({\r\n            categoria: e.target.value\r\n        }, () => {\r\n            this.props.consultarNoticias(this.state.categoria);\r\n        })\r\n\r\n        //pasarlo a la pagina principal para que haga la consulta\r\n       \r\n     }\r\n\r\n    render() { \r\n        return ( \r\n\r\n            <div className= \"buscador row\">\r\n                <div className=\"col s12 m8 offset-m2\"></div>\r\n                    <form>\r\n                        <h2>Encuentra Noticias por categoría\r\n                        </h2>\r\n                        <div className=\"input-field col s12  m8\"> \r\n                            <select \r\n                            onChange={this.cambiarCategoria}\r\n                            >\r\n                                <option value=\"general\">General</option>\r\n                                <option value=\"business\"> Negocios</option>\r\n                                <option value=\"entertainment\">Entretenimiento</option>\r\n                                <option value=\"health\">Salud</option>\r\n                                <option value=\"science\">Ciencia</option>\r\n                                <option value=\"sports\"> Deportes</option>\r\n                                <option value=\"technology\">Tecnología</option>\r\n\r\n\r\n\r\n\r\n                             </select>   \r\n\r\n\r\n\r\n                         </div>   \r\n                    </form>   \r\n            </div>\r\n\r\n         );\r\n    }\r\n}\r\n \r\nFormulario.propTypes = { \r\n    consultarNoticias: propTypes.func.isRequired\r\n}\r\nexport default Formulario;","import React, { Component, Fragment } from 'react';\nimport Header from './components/Header';\nimport ListaNoticias from './components/ListaNoticias';\nimport Formulario from './components/Formulario';\n\nclass App extends Component {\n  state = { \n    noticias: []\n   }\n\n  componentDidMount() {\n   this.consultarNoticias();\n  }\n\n  consultarNoticias = async (categoria = 'general') => {\n    const url =`http://newsapi.org/v2/top-headlines?country=ar&category=${categoria}&apiKey=4308c8eb608e41bcad435d201cc340be`\n\n    const respuesta = await fetch(url)\n    const noticias= await respuesta.json();\n\n    this.setState({\n      noticias: noticias.articles\n    \n    })\n\n\n\n  }\n\n  render() { \n    return ( \n      <Fragment>\n        <Header\n        titulo = 'Noticias Argentinas '\n        />\n        <div className=\"container white contenedor-noticias\">\n          <Formulario\n            consultarNoticias={this.consultarNoticias}\n          />\n\n          <ListaNoticias\n            noticias = {this.state.noticias}\n          \n          \n          />\n         </div> \n      </Fragment>\n\n\n    \n      \n      \n      );\n  }\n}\n \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}